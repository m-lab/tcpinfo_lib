// Copyright 2016 measurement-lab
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Placeholder for more interesting tests.

#include "gtest/gtest.h"
#include "tcpinfo.pb.h"
#include "tcpinfo_lib.h"

namespace mlab {
namespace netlink {

// These samples (raw{1,2,3,4}) are collected from stripped down ss.c
// that also dumps the raw data.  Would be good to have more variability.

//   0      0       2620:0:1003:413:ac8f:7971:3973:b48e:38625
//   2607:f8b0:4006:80d::200e:https  timer:(keepalive 31sec 0), uid:148024,
//   ino:89694138, sk:0, <->, skmem:(r0,rb369280,t0,tb87552,f0,w0,o0,bl0) ts,
//   sack, cubic, wscale:7/7, rto:208, rtt:8.5/11, ato:40, mss:1398, cwnd:19,
//   ssthresh:18, send 25.0M,bps, lastsnd:239268, lastrcv:239268, lastack:13972,
//   rcv_rtt:36, rcv_space:28800
std::string raw1(
    "\x10\x01\x00\x00\x14\x00\x02\x00\x40\xE2\x01\x00\xA8\x4B\x00\x00\x0A\x01"
    "\x02\x00\x96\xE1\x01\xBB\x26\x20\x00\x00\x10\x03\x04\x13\xAC\x8F\x79\x71"
    "\x39\x73\xB4\x8E\x26\x07\xF8\xB0\x40\x06\x08\x0D\x00\x00\x00\x00\x00\x00"
    "\x20\x0E\x00\x00\x00\x00\x00\x1F\xF8\x35\x00\x88\xFF\xFF\x6C\x79\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x38\x42\x02\x00\xBA\x9F\x58\x05\x05\x00"
    "\x08\x00\x00\x00\x00\x00\x14\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x24\x00\x07\x00\x00\x00\x00\x00\x80\xA2"
    "\x05\x00\x00\x00\x00\x00\x00\x56\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x6C\x00\x02\x00\x01\x00\x00\x00\x00\x07"
    "\x77\x00\x80\x2C\x03\x00\x40\x9C\x00\x00\x76\x05\x00\x00\x4A\x02\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\xA4\xA6\x03\x00\x00\x00\x00\x00\xA4\xA6\x03\x00\x94\x36\x00\x00"
    "\xDC\x05\x00\x00\xD8\x7D\x00\x00\x34\x21\x00\x00\xF8\x2A\x00\x00\x12\x00"
    "\x00\x00\x13\x00\x00\x00\x94\x05\x00\x00\x03\x00\x00\x00\xA0\x8C\x00\x00"
    "\x80\x70\x00\x00\x00\x00\x00\x00\x0A\x00\x04\x00\x63\x75\x62\x69\x63\x00"
    "\x00\x00",
    0x110);

//   0      0       2620:0:1003:413:ac8f:7971:3973:b48e:54550
//   2607:f8b0:400d:c03::bd:https  timer:(keepalive 30sec 0), uid:148024,
//   ino:89698212, sk:0, <->, skmem:(r0,rb369280,t0,tb46080,f0,w0,o0,bl0) ts,
//   sack, cubic, wscale:7/7, rto:220, rtt:21.5/15, ato:40, mss:1348, cwnd:10,
//   send 5.0M,bps, lastsnd:239528, lastrcv:239528, lastack:14264, rcv_rtt:16,
//   rcv_space:28800
std::string raw2(
    "\x10\x01\x00\x00\x14\x00\x02\x00\x40\xE2\x01\x00\xA8\x4B\x00\x00\x0A\x01"
    "\x02\x00\xD5\x16\x01\xBB\x26\x20\x00\x00\x10\x03\x04\x13\xAC\x8F\x79\x71"
    "\x39\x73\xB4\x8E\x26\x07\xF8\xB0\x40\x0D\x0C\x03\x00\x00\x00\x00\x00\x00"
    "\x00\xBD\x00\x00\x00\x00\x40\x97\x84\x45\x01\x88\xFF\xFF\x3C\x78\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x38\x42\x02\x00\xA4\xAF\x58\x05\x05\x00"
    "\x08\x00\x00\x00\x00\x00\x14\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x24\x00\x07\x00\x00\x00\x00\x00\x80\xA2"
    "\x05\x00\x00\x00\x00\x00\x00\xB4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x6C\x00\x02\x00\x01\x00\x00\x00\x00\x07"
    "\x77\x00\x60\x5B\x03\x00\x40\x9C\x00\x00\x44\x05\x00\x00\xB8\x04\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\xA8\xA7\x03\x00\x00\x00\x00\x00\xA8\xA7\x03\x00\xB8\x37\x00\x00"
    "\xDC\x05\x00\x00\x04\xA2\x00\x00\xFC\x53\x00\x00\x98\x3A\x00\x00\xFF\xFF"
    "\xFF\x7F\x0A\x00\x00\x00\x94\x05\x00\x00\x03\x00\x00\x00\x80\x3E\x00\x00"
    "\x80\x70\x00\x00\x00\x00\x00\x00\x0A\x00\x04\x00\x63\x75\x62\x69\x63\x00"
    "\x00\x00",
    0x110);

//   0      0       2620:0:1003:413:ac8f:7971:3973:b48e:42341
//   2607:f8b0:400d:c02::5f:https  timer:(keepalive 30sec 0), uid:148024,
//   ino:89698213, sk:0, <->, skmem:(r0,rb369280,t0,tb46080,f0,w0,o0,bl0) ts,
//   sack, cubic, wscale:7/7, rto:220, rtt:21.5/15, ato:40, mss:1348, cwnd:10,
//   send 5.0M,bps, lastsnd:239432, lastrcv:239432, lastack:14132, rcv_rtt:16,
//   rcv_space:28800
std::string raw3(
    "\x10\x01\x00\x00\x14\x00\x02\x00\x40\xE2\x01\x00\xA8\x4B\x00\x00\x0A\x01"
    "\x02\x00\xA5\x65\x01\xBB\x26\x20\x00\x00\x10\x03\x04\x13\xAC\x8F\x79\x71"
    "\x39\x73\xB4\x8E\x26\x07\xF8\xB0\x40\x0D\x0C\x02\x00\x00\x00\x00\x00\x00"
    "\x00\x5F\x00\x00\x00\x00\x80\xAE\x84\x45\x01\x88\xFF\xFF\xC0\x78\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x38\x42\x02\x00\xA5\xAF\x58\x05\x05\x00"
    "\x08\x00\x00\x00\x00\x00\x14\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x24\x00\x07\x00\x00\x00\x00\x00\x80\xA2"
    "\x05\x00\x00\x00\x00\x00\x00\xB4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x6C\x00\x02\x00\x01\x00\x00\x00\x00\x07"
    "\x77\x00\x60\x5B\x03\x00\x40\x9C\x00\x00\x44\x05\x00\x00\xB8\x04\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x48\xA7\x03\x00\x00\x00\x00\x00\x48\xA7\x03\x00\x34\x37\x00\x00"
    "\xDC\x05\x00\x00\xAA\xAA\x00\x00\xFC\x53\x00\x00\x98\x3A\x00\x00\xFF\xFF"
    "\xFF\x7F\x0A\x00\x00\x00\x94\x05\x00\x00\x03\x00\x00\x00\x80\x3E\x00\x00"
    "\x80\x70\x00\x00\x00\x00\x00\x00\x0A\x00\x04\x00\x63\x75\x62\x69\x63\x00"
    "\x00\x00",
    0x110);

//   0      0       2620:0:1003:413:ac8f:7971:3973:b48e:48537
//   2607:f8b0:400d:c06::5f:https  ino:89693107, sk:0, <->,
//   skmem:(r0,rb369280,t0,tb46080,f0,w0,o0,bl0) ts, sack, cubic, wscale:7/7,
//   rto:216, rtt:16/11, ato:40, mss:1348, cwnd:10, send 6.7M,bps,
//   lastsnd:179168, lastrcv:29100, lastack:29100, rcv_rtt:16, rcv_space:28800
std::string raw4(
    "\x10\x01\x00\x00\x14\x00\x02\x00\x40\xE2\x01\x00\xA8\x4B\x00\x00\x0A\x01"
    "\x00\x00\xBD\x99\x01\xBB\x26\x20\x00\x00\x10\x03\x04\x13\xAC\x8F\x79\x71"
    "\x39\x73\xB4\x8E\x26\x07\xF8\xB0\x40\x0D\x0C\x06\x00\x00\x00\x00\x00\x00"
    "\x00\x5F\x00\x00\x00\x00\xC0\x87\xEE\x20\x01\x88\xFF\xFF\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xB3\x9B\x58\x05\x05\x00"
    "\x08\x00\x00\x00\x00\x00\x14\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x24\x00\x07\x00\x00\x00\x00\x00\x80\xA2"
    "\x05\x00\x00\x00\x00\x00\x00\xB4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x6C\x00\x02\x00\x01\x00\x00\x00\x00\x07"
    "\x77\x00\xC0\x4B\x03\x00\x40\x9C\x00\x00\x44\x05\x00\x00\xB8\x04\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\xE0\xBB\x02\x00\x00\x00\x00\x00\xAC\x71\x00\x00\xAC\x71\x00\x00"
    "\xDC\x05\x00\x00\x20\xA1\x00\x00\x80\x3E\x00\x00\xF8\x2A\x00\x00\xFF\xFF"
    "\xFF\x7F\x0A\x00\x00\x00\x94\x05\x00\x00\x03\x00\x00\x00\x80\x3E\x00\x00"
    "\x80\x70\x00\x00\x00\x00\x00\x00\x0A\x00\x04\x00\x63\x75\x62\x69\x63\x00"
    "\x00\x00",
    0x110);

TEST(Parser, LotsOfFields) {
  TCPInfoParser parser;
  auto* hdr = (const struct nlmsghdr*)raw1.c_str();
  auto proto = parser.ParseNLMsg(hdr, IPPROTO_TCP);
  ASSERT_EQ(proto.diag_protocol(), IPPROTO_TCP);
  EXPECT_TRUE(proto.has_inet_diag_msg());
  EXPECT_EQ(proto.inet_diag_msg().expires(), 31084);
  EXPECT_EQ(proto.inet_diag_msg().uid(), 148024);
  EXPECT_EQ(proto.inet_diag_msg().inode(), 89694138);

  ASSERT_TRUE(proto.has_tcp_info());
  EXPECT_EQ(proto.tcp_info().state(), TCPState::ESTABLISHED);
  EXPECT_EQ(proto.tcp_info().snd_wscale(), 7);
  EXPECT_EQ(proto.tcp_info().rcv_wscale(), 7);

  EXPECT_EQ(proto.tcp_info().rto(), 208000);
  EXPECT_EQ(proto.tcp_info().ato(), 40000);
  EXPECT_EQ(proto.tcp_info().snd_mss(), 1398);
  EXPECT_EQ(proto.tcp_info().rcv_mss(), 586);
  EXPECT_EQ(proto.tcp_info().last_data_sent(), 239268);
  EXPECT_EQ(proto.tcp_info().last_ack_sent(), 0);
  EXPECT_EQ(proto.tcp_info().last_data_recv(), 239268);
  EXPECT_EQ(proto.tcp_info().last_ack_recv(), 13972);
  EXPECT_EQ(proto.tcp_info().pmtu(), 1500);
  EXPECT_EQ(proto.tcp_info().rcv_ssthresh(), 32216);
  EXPECT_EQ(proto.tcp_info().rtt(), 8500);
  EXPECT_EQ(proto.tcp_info().rttvar(), 11000);
  // Bored now.

  EXPECT_EQ(proto.congestion_algorithm(), "cubic");

  ASSERT_TRUE(proto.has_socket_mem());
  EXPECT_EQ(proto.socket_mem().rcvbuf(), 369280);
  EXPECT_EQ(proto.socket_mem().sndbuf(), 87552);

  // Check proper parsing of endpoints.
  EXPECT_EQ(ToString(proto.inet_diag_msg().sock_id().source()),
            "2620:0:1003:413:ac8f:7971:3973:b48e:38625");
  // Don't really care if this changes, but useful to detect
  // when it does.
  EXPECT_EQ(proto.ByteSize(), 191);
  fprintf(stderr, "%s\n", proto.DebugString().c_str());
  fprintf(stderr, "%d\n", proto.ByteSize());
}

// TODO - these samples currently seem to contain BBR info, which
// is surprising.  Are we running internal google kernels that
// are already equipt with this data, or is it aliasing some other
// data?

TEST(Parser, MoreSamples) {
  TCPInfoParser parser;
  auto* hdr = (const struct nlmsghdr*)raw2.c_str();
  auto proto = parser.ParseNLMsg(hdr, IPPROTO_TCP);
  ASSERT_TRUE(proto.has_tcp_info());
  ASSERT_TRUE(proto.has_socket_mem());

  hdr = (const struct nlmsghdr*)raw3.c_str();
  proto = parser.ParseNLMsg(hdr, IPPROTO_TCP);
  ASSERT_TRUE(proto.has_tcp_info());
  ASSERT_TRUE(proto.has_socket_mem());

  hdr = (const struct nlmsghdr*)raw4.c_str();
  proto = parser.ParseNLMsg(hdr, IPPROTO_TCP);
  ASSERT_TRUE(proto.has_tcp_info());
  ASSERT_TRUE(proto.has_socket_mem());
}

}  // namespace netlink
}  // namespace mlab
