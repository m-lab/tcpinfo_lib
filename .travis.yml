dist: trusty
sudo: required
language: cpp

matrix:
  include:
    # Build with gcc and coverage.
    - compiler: gcc
      addons:
        apt:
          sources:
          - ubuntu-toolchain-r-test
          packages:
          - gcc-4.9
          - g++-4.9
          - lcov
      install:
        # Install coverage tools. (Used only for gcc build)
        - cd ${TRAVIS_BUILD_DIR}
        - sudo apt-get -qq install lcov
        - gem install coveralls-lcov
        - lcov --version
      env:
        - CXX_COMPILER=g++ C_COMPILER=gcc \
          COVERAGE_FLAGS="-g -O0 --coverage" # debug, no optimization
      after_success:
        # Collect coverage data.
        - cd ${TRAVIS_BUILD_DIR}
        - lcov --directory build/ --capture -o coverage.info
        - lcov -r coverage.info '*_test.cc' '*.pb.h' '*.pb.cc' '*/iproute2/*' '/usr/include/*' '*/gtest/*' -o coverage.info
        - lcov --list coverage.info
        # Upload the coverage info to coveralls.
        - coveralls-lcov --repo-token ${COVERALLS_TOKEN} coverage.info

    # Build with clang and optimization.
    - compiler: clang
      addons:
        apt:
          sources:
          - ubuntu-toolchain-r-test
          - llvm-toolchain-trusty-3.6
          packages:
          - clang-3.6
          - lcov
      env:
        - CXX_COMPILER=clang++ C_COMPILER=clang

before_install:
- clang --version
- sudo apt-get update -qq

install:
# install GTest and GMock
# TODO(gfr) See if there is a faster way to install these...
#- sudo apt-get -qq install libgtest-dev
#- "cd /usr/src/gtest && sudo cmake . && sudo cmake --build . && sudo mv libg* /usr/local/lib/ ; cd -"
#- sudo apt-get -qq install google-mock
#- "cd /usr/src/gmock && sudo cmake . && sudo cmake --build . && sudo mv libg* /usr/local/lib/ ; cd -"
#- g++ --version

before_cache:
- cd ${TRAVIS_BUILD_DIR}
- mkdir build

cache:
# This controls the caching of third party stuff.  Saves about 8 minutes.
  directories:
  - build/ext/iproute2
  - protobuf

before_script:
# Check if protobuf compiler is present, and load if it is not.
# Note that this builds with gcc, regardless of which compiler is specified.
- sudo ./install-protobuf.sh

script:
# Build and run tests.
- cd build
- cmake -DCMAKE_CXX_COMPILER=$CXX_COMPILER -DCMAKE_C_COMPILER=$C_COMPILER -DCOVERAGE_FLAGS="$COVERAGE_FLAGS" ..
- cmake --build .
- ctest -V

